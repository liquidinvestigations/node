{% from '_lib.hcl' import shutdown_delay, authproxy_group, group_disk, task_logs, continuous_reschedule with context -%}

job "nextcloud-instance-2" {
  datacenters = ["dc1"]
  type = "service"
  priority = 98


  group "maria" {
    ${ group_disk() }
    ${ continuous_reschedule() }
    task "maria" {
      ${ task_logs() }

      constraint {
        attribute = "{% raw %}${meta.liquid_volumes}{% endraw %}"
        operator = "is_set"
      }
      affinity {
        attribute = "{% raw %}${meta.liquid_large_databases}{% endraw %}"
        value     = "true"
        weight    = 100
      }

      driver = "docker"
      ${ shutdown_delay() }
      config {
        image = "mariadb:10.4"
        volumes = [
          "{% raw %}${meta.liquid_volumes}{% endraw %}/nextcloud-instance-2/mysql:/var/lib/mysql",
        ]
        port_map {
          maria = 3306
        }
        memory_hard_limit = 750
      }
      template {
        data = <<-EOF
        MYSQL_RANDOM_ROOT_PASSWORD = "yes"
        MYSQL_DATABASE = "nextcloud-instance-2"
        MYSQL_USER = "nextcloud-instance-2"
        {{- with secret "liquid/nextcloud-instance-2/nextcloud-instance-2.maria" }}
          MYSQL_PASSWORD = {{.Data.secret_key | toJSON }}
        {{- end }}
        EOF
        destination = "local/maria.env"
        env = true
      }
      resources {
        cpu = 200
        memory = 250
        network {
          mbits = 1
          port "maria" {
            static = 16667
          }
        }
      }
      service {
        name = "nextcloud-instance-2-maria"
        port = "maria"
        check {
          name = "tcp"
          initial_status = "critical"
          type = "tcp"
          interval = "${check_interval}"
          timeout = "${check_timeout}"
        }
      }
    }
  }

  group "nextcloud-instance-2" {
    ${ group_disk() }
    ${ continuous_reschedule() }

    task "nextcloud-instance-2" {
      ${ task_logs() }

      constraint {
        attribute = "{% raw %}${meta.liquid_volumes}{% endraw %}"
        operator = "is_set"
      }
      constraint {
        attribute = "{% raw %}${meta.liquid_collections}{% endraw %}"
        operator = "is_set"
      }

      driver = "docker"
      config {
        image = "${config.image('liquid-nextcloud')}"
        volumes = [
          "{% raw %}${meta.liquid_volumes}{% endraw %}/nextcloud-instance-2/nextcloud-instance-2/data:/var/www/html/data",
          "{% raw %}${meta.liquid_volumes}{% endraw %}/nextcloud-instance-2/nextcloud-instance-2/config:/var/www/html/config",
          "{% raw %}${meta.liquid_volumes}{% endraw %}/nextcloud-instance-2/nextcloud-instance-2/themes:/var/www/html/themes",
          "{% raw %}${meta.liquid_collections}{% endraw %}/uploads-nextcloud-2/data:/var/www/html/data/uploads/files",
        ]
        args = ["/bin/bash", "/local/start.sh"]
        port_map {
          http = 80
        }
        labels {
          liquid_task = "nextcloud-instance-2"
        }
        memory_hard_limit = 3000
      }
      resources {
        cpu = 200
        memory = 300
        network {
          mbits = 1
          port "http" {
            static = 16666
          }
        }
      }
      env {
        NEXTCLOUD_URL = "${config.liquid_http_protocol}://nextcloud-instance-2.${config.liquid_domain}"
        LIQUID_TITLE = "${config.liquid_title} (Nextcloud Instance 2)"
        LIQUID_CORE_URL = "${config.liquid_core_url}"
        LIQUID_COLOR_PRIMARY = "#920909"
      }
      template {
        data = <<-EOF
        HTTP_PROTO = "${config.liquid_http_protocol}"
        NEXTCLOUD_HOST = "nextcloud-instance-2.{{ key "liquid_domain" }}"
        NEXTCLOUD_ADMIN_USER = "admin"
        NEXTCLOUD_ADMIN = "admin"
        {{- with secret "liquid/nextcloud-instance-2/nextcloud-instance-2.admin" }}
          NEXTCLOUD_ADMIN_PASSWORD = {{.Data.secret_key | toJSON }}
        {{- end }}
        MYSQL_HOST = "{{ env "attr.unique.network.ip-address" }}:16667"
        MYSQL_DB = "nextcloud-instance-2"
        MYSQL_USER = "nextcloud-instance-2"
        {{- with secret "liquid/nextcloud-instance-2/nextcloud-instance-2.maria" }}
          MYSQL_PASSWORD = {{.Data.secret_key | toJSON }}
        {{- end }}
        {{- with secret "liquid/nextcloud-instance-2/nextcloud-instance-2.uploads" }}
          UPLOADS_USER_PASSWORD = {{.Data.secret_key | toJSON }}
        {{- end }}
        EOF
        destination = "local/nextcloud-instance-2-migrate.env"
        env = true
      }
      template {
        data = <<EOF
# Auto-generated by nextcloud-instance-2 migrate script
{% include 'nextcloud-setup.sh' %}
        EOF
        destination = "local/setup.sh"
        perms = "755"
      }

      template {
        data = <<-EOF
          #!/bin/bash
          set -ex

          echo "0/4 nextcloud-instance-2 setup"
          # hack: trigger nextcloud-instance-2 entrypoint (it checks if its $1 begins with 'apache'
          /entrypoint.sh apache2-foreground -v

          echo "1/4 exec setup"
          chown -R 33:33 /var/www/html/
          echo chown done

          echo "2/4 exec setup"
          sudo -Eu www-data bash /local/setup.sh

          echo "3/4 start periodic"
          (
            while true; do
              # about 6h
              sleep 7200
              echo "rescanning files..."
              sudo -Eu www-data php occ files:scan --all
            done
          ) &

          echo "4/4 start server"
          exec  /entrypoint.sh apache2-foreground
        EOF
        destination = "local/start.sh"
        perms = "755"
      }

      service {
        name = "nextcloud-instance-2-app"
        port = "http"
        check {
          name = "http"
          initial_status = "critical"
          type = "http"
          path = "/status.php"
          interval = "${check_interval}"
          timeout = "${check_timeout}"
          header {
            Host = ["nextcloud-instance-2.${liquid_domain}"]
          }
        }
      }
    }
  }

  ${- authproxy_group(
      'nextcloud-instance-2',
      host='nextcloud-instance-2.' + liquid_domain,
      upstream_port=16666,
      group='nextcloud-instance-2',
      redis_id=9,
      needs_constraint_to_volumes=True,
    ) }
}
